#!/usr/bin/env python3
"""
Script de ayuda interactivo para navegar por la documentaci√≥n y scripts del proyecto
"""

import os
import sys
from pathlib import Path


def print_header(title):
    """Imprimir un header formateado"""
    print("\n" + "=" * 60)
    print(f"üéØ {title}")
    print("=" * 60)


def print_section(title):
    """Imprimir una secci√≥n"""
    print(f"\nüìã {title}")
    print("-" * 40)


def print_item(title, description, command=None):
    """Imprimir un √≠tem con formato"""
    print(f"‚Ä¢ {title}")
    print(f"  {description}")
    if command:
        print(f"  üíª {command}")
    print()


def show_main_menu():
    """Mostrar men√∫ principal"""
    print_header("SISTEMA DE AYUDA - GREENHOUSE PROJECT")

    options = [
        ("1", "üöÄ Inicio R√°pido", "Gu√≠as de configuraci√≥n y uso b√°sico"),
        ("2", "üè∑Ô∏è Sistema de Tags", "Gesti√≥n de tags y migraci√≥n de candidatos"),
        ("3", "üìä Dashboards", "Interfaces web y herramientas de visualizaci√≥n"),
        ("4", "üîß Scripts", "Herramientas y utilidades disponibles"),
        ("5", "üìö Documentaci√≥n", "Enlaces a documentaci√≥n completa"),
        ("6", "üö® Soluci√≥n de Problemas", "Diagn√≥stico y troubleshooting"),
        ("7", "üìã Estado del Proyecto", "Qu√© est√° completado y qu√© falta"),
        ("0", "‚ùå Salir", "Salir del sistema de ayuda"),
    ]

    for option, title, description in options:
        print(f"{option}. {title}")
        print(f"   {description}")

    return input("\nüîç Selecciona una opci√≥n: ")


def show_quick_start():
    """Mostrar gu√≠a de inicio r√°pido"""
    print_header("INICIO R√ÅPIDO")

    print_section("1. Configuraci√≥n Inicial")
    print_item(
        "Setup Autom√°tico", "Configurar todo el entorno de desarrollo", "./setup-dev.sh"
    )

    print_item(
        "Configurar Variables de Entorno",
        "Copiar y configurar archivo .env",
        "cp .env.example .env && nano .env",
    )

    print_section("2. Ejecutar el Proyecto")
    print_item(
        "Iniciar Servidor (Desarrollo)",
        "Servidor con auto-reload",
        "./scripts/start_server.sh",
    )

    print_item(
        "Iniciar Servidor (Directo)",
        "Comando directo de uvicorn",
        "pipenv run uvicorn main:app --reload --host 0.0.0.0 --port 8000",
    )

    print_section("3. Acceder a Dashboards")
    print_item(
        "Dashboard Principal",
        "Dashboard original con datos de TeamTailor",
        "http://localhost:8000/dashboard/",
    )

    print_item(
        "Dashboard Dual",
        "Dashboard con datos locales y TeamTailor",
        "http://localhost:8000/dashboard/dual",
    )

    print_item(
        "P√°gina de Pruebas",
        "Herramienta de diagn√≥stico",
        "http://localhost:8000/dashboard/test",
    )

    print_section("4. Sistema de Tags")
    print_item(
        "Ver Tags Disponibles",
        "Men√∫ interactivo del sistema de tags",
        "pipenv run python scripts/teamtailor/quick_start_tagging.py",
    )

    print_item(
        "Aplicar Tags",
        "Aplicar tags a un candidato espec√≠fico",
        "pipenv run python scripts/teamtailor/add_candidate_tags.py --candidate-id 123 --tags 'python,react'",
    )


def show_tag_system():
    """Mostrar informaci√≥n del sistema de tags"""
    print_header("SISTEMA DE TAGS")

    print_section("Scripts Principales")
    print_item(
        "quick_start_tagging.py",
        "Men√∫ interactivo para comenzar con el sistema de tags",
        "pipenv run python scripts/teamtailor/quick_start_tagging.py",
    )

    print_item(
        "add_candidate_tags.py",
        "Aplicar tags a candidatos individuales o en lote",
        "pipenv run python scripts/teamtailor/add_candidate_tags.py --candidate-id 123 --tags 'python,react'",
    )

    print_item(
        "fast_batch_migration.py",
        "Migraci√≥n r√°pida y masiva de candidatos con tags",
        "pipenv run python scripts/teamtailor/fast_batch_migration.py --limit 100 --live",
    )

    print_section("Scripts de Utilidad")
    print_item(
        "example_tag_usage.py",
        "Ejemplos de uso del sistema de tags",
        "pipenv run python scripts/teamtailor/example_tag_usage.py",
    )

    print_item(
        "demo_tag_system.py",
        "Demo del sistema sin conexi√≥n real a TeamTailor",
        "pipenv run python scripts/teamtailor/demo_tag_system.py",
    )

    print_item(
        "verify_migration.py",
        "Verificar el √©xito de la migraci√≥n",
        "pipenv run python scripts/teamtailor/verify_migration.py",
    )

    print_section("Flujo de Trabajo Recomendado")
    steps = [
        "1. quick_start_tagging.py - Ver opciones disponibles",
        "2. demo_tag_system.py - Probar sin conexi√≥n real",
        "3. fast_batch_migration.py --dry-run - Simular migraci√≥n",
        "4. verify_migration.py - Verificar resultados",
        "5. fast_batch_migration.py --live - Aplicar cambios reales",
    ]

    for step in steps:
        print(f"   {step}")

    print_section("Variables de Entorno Requeridas")
    env_vars = [
        "TT_TOKEN=your_teamtailor_token",
        "TT_BASE_URL=https://api.teamtailor.com",
        "TT_API_VERSION=v1",
        "TEAMTAILOR_TEST_MODE=true  # Para pruebas",
    ]

    for var in env_vars:
        print(f"   {var}")


def show_dashboards():
    """Mostrar informaci√≥n de dashboards"""
    print_header("SISTEMAS DE DASHBOARDS")

    print_section("Dashboards Disponibles")
    print_item(
        "Dashboard Principal",
        "Dashboard original con datos de TeamTailor",
        "http://localhost:8000/dashboard/",
    )

    print_item(
        "Dashboard Dual",
        "Dashboard con dos fuentes de datos (local + TeamTailor)",
        "http://localhost:8000/dashboard/dual",
    )

    print_item(
        "P√°gina de Pruebas",
        "Herramienta de diagn√≥stico y testing",
        "http://localhost:8000/dashboard/test",
    )

    print_section("Scripts de Diagn√≥stico")
    print_item(
        "diagnose_dashboard.py",
        "Diagn√≥stico completo del sistema de dashboards",
        "pipenv run python scripts/dashboard/diagnose_dashboard.py",
    )

    print_item(
        "test_dashboard_browser.py",
        "Simular comportamiento del navegador",
        "pipenv run python scripts/testing/test_dashboard_browser.py",
    )

    print_item(
        "test_dual_dashboard.py",
        "Tests espec√≠ficos del dashboard dual",
        "pipenv run python scripts/testing/test_dual_dashboard.py",
    )

    print_section("Endpoints de API")
    endpoints = [
        ("/api/teamtailor/local/stats", "Estad√≠sticas de datos locales"),
        ("/api/teamtailor/local/candidates", "Lista de candidatos locales"),
        ("/api/teamtailor/stats", "Estad√≠sticas de TeamTailor"),
        ("/api/teamtailor/candidates", "Lista de candidatos de TeamTailor"),
        ("/api/teamtailor/test", "Test de conectividad"),
        ("/candidate-tags/search", "B√∫squeda por tags"),
    ]

    for endpoint, description in endpoints:
        print(f"   {endpoint}")
        print(f"     {description}")
        print()


def show_scripts():
    """Mostrar informaci√≥n de scripts"""
    print_header("SCRIPTS Y HERRAMIENTAS")

    print_section("Scripts de Configuraci√≥n")
    print_item(
        "setup-dev.sh",
        "Script principal de configuraci√≥n del proyecto",
        "./setup-dev.sh",
    )

    print_item(
        "start_server.sh",
        "Iniciar el servidor de desarrollo",
        "./scripts/start_server.sh",
    )

    print_section("Scripts de TeamTailor")
    print_item(
        "quick_start_tagging.py",
        "Men√∫ interactivo para el sistema de tags",
        "pipenv run python scripts/teamtailor/quick_start_tagging.py",
    )

    print_item(
        "add_candidate_tags.py",
        "Aplicar tags a candidatos",
        "pipenv run python scripts/teamtailor/add_candidate_tags.py --candidate-id 123 --tags 'python,react'",
    )

    print_item(
        "fast_batch_migration.py",
        "Migraci√≥n masiva de candidatos",
        "pipenv run python scripts/teamtailor/fast_batch_migration.py --limit 100 --live",
    )

    print_section("Scripts de Dashboard")
    print_item(
        "diagnose_dashboard.py",
        "Diagn√≥stico completo del sistema de dashboards",
        "pipenv run python scripts/dashboard/diagnose_dashboard.py",
    )

    print_section("Scripts de Testing")
    print_item(
        "test_dashboard_browser.py",
        "Simular comportamiento del navegador",
        "pipenv run python scripts/testing/test_dashboard_browser.py",
    )

    print_item(
        "test_dual_dashboard.py",
        "Tests espec√≠ficos del dashboard dual",
        "pipenv run python scripts/testing/test_dual_dashboard.py",
    )

    print_section("Scripts de Seguridad")
    print_item(
        "security_analysis.py",
        "An√°lisis de seguridad del c√≥digo",
        "pipenv run python scripts/security/security_analysis.py",
    )

    print_section("Scripts de Limpieza")
    print_item(
        "aggressive_cleanup.py",
        "Limpieza agresiva del proyecto",
        "pipenv run python scripts/aggressive_cleanup.py",
    )


def show_documentation():
    """Mostrar enlaces a documentaci√≥n"""
    print_header("DOCUMENTACI√ìN COMPLETA")

    print_section("Documentaci√≥n Principal")
    print_item(
        "README Principal", "Documentaci√≥n general del proyecto", "docs/README.md"
    )

    print_item(
        "Sistema de Tags",
        "Documentaci√≥n completa del sistema de tags",
        "docs/features/tag-system/README.md",
    )

    print_item(
        "Sistema de Dashboards",
        "Documentaci√≥n de dashboards y interfaces",
        "docs/features/dashboard/README.md",
    )

    print_section("Gu√≠as y Tutoriales")
    print_item(
        "Gu√≠as de Migraci√≥n",
        "Proceso de migraci√≥n de datos",
        "docs/guides/migration/README.md",
    )

    print_item(
        "Gu√≠as de Desarrollo",
        "Setup y contribuci√≥n al proyecto",
        "docs/development/README.md",
    )

    print_section("Scripts")
    print_item(
        "Scripts de TeamTailor",
        "Documentaci√≥n de scripts de TeamTailor",
        "docs/scripts/teamtailor/README.md",
    )

    print_item(
        "Scripts de Dashboard",
        "Documentaci√≥n de scripts de dashboard",
        "docs/scripts/dashboard/README.md",
    )

    print_section("APIs")
    print_item(
        "API de TeamTailor",
        "Endpoints y documentaci√≥n de API",
        "docs/api/TEAMTAILOR_API_ENDPOINTS.md",
    )

    print_item(
        "API de Candidatos",
        "Gesti√≥n de candidatos y prospects",
        "docs/api/CANDIDATES_PROSPECTS_API.md",
    )


def show_troubleshooting():
    """Mostrar soluci√≥n de problemas"""
    print_header("SOLUCI√ìN DE PROBLEMAS")

    print_section("Problemas Comunes")

    print_item(
        "Dashboard no carga datos",
        "Verificar conectividad y endpoints",
        "http://localhost:8000/dashboard/test",
    )

    print_item(
        "Errores de API", "Verificar variables de entorno", "cat .env | grep TT_"
    )

    print_item("Scripts no ejecutan", "Verificar dependencias", "pipenv install")

    print_section("Herramientas de Diagn√≥stico")
    print_item(
        "Diagn√≥stico R√°pido",
        "Test completo del sistema",
        "pipenv run python scripts/dashboard/diagnose_dashboard.py",
    )

    print_item(
        "Test de Navegador",
        "Simular comportamiento del navegador",
        "pipenv run python scripts/testing/test_dashboard_browser.py",
    )

    print_item(
        "Validaci√≥n de Datos",
        "Verificar integridad de datos",
        "pipenv run python scripts/dashboard/data_validation.py",
    )

    print_section("Pasos de Diagn√≥stico")
    steps = [
        "1. Verificar que el servidor est√© corriendo",
        "2. Probar conectividad b√°sica: curl http://localhost:8000/",
        "3. Usar p√°gina de pruebas: http://localhost:8000/dashboard/test",
        "4. Revisar logs del servidor",
        "5. Verificar variables de entorno",
        "6. Ejecutar script de diagn√≥stico completo",
    ]

    for step in steps:
        print(f"   {step}")

    print_section("Logs Importantes")
    logs = [
        "logs/dashboard.log - Logs del dashboard",
        "logs/teamtailor.log - Logs de TeamTailor",
        "logs/error.log - Errores generales",
    ]

    for log in logs:
        print(f"   {log}")


def show_project_status():
    """Mostrar estado del proyecto"""
    print_header("ESTADO DEL PROYECTO")

    print_section("‚úÖ Completado")
    completed = [
        "Sistema de tags estructurado",
        "Dashboard dual (local + TeamTailor)",
        "API endpoints completos",
        "Scripts de migraci√≥n",
        "Documentaci√≥n organizada",
        "Herramientas de diagn√≥stico",
        "Sistema de filtros avanzados",
        "P√°gina de pruebas y diagn√≥stico",
    ]

    for item in completed:
        print(f"   ‚úÖ {item}")

    print_section("üîÑ En Progreso")
    in_progress = [
        "Optimizaci√≥n de performance",
        "Tests automatizados",
        "Monitoreo avanzado",
    ]

    for item in in_progress:
        print(f"   üîÑ {item}")

    print_section("üìã Pendiente")
    pending = [
        "Exportaci√≥n de datos",
        "Notificaciones en tiempo real",
        "Gr√°ficos avanzados",
        "Modo offline",
        "Personalizaci√≥n de dashboards",
    ]

    for item in pending:
        print(f"   üìã {item}")

    print_section("üìä M√©tricas Actuales")
    metrics = [
        "Candidatos Locales: ~3,656 √∫nicos",
        "Candidatos TeamTailor: ~25 (paginados)",
        "Tags Disponibles: 50+ categorizados",
        "Categor√≠as: 7 tipos principales",
        "Scripts Disponibles: 20+ herramientas",
    ]

    for metric in metrics:
        print(f"   üìä {metric}")


def main():
    """Funci√≥n principal del script de ayuda"""
    while True:
        choice = show_main_menu()

        if choice == "1":
            show_quick_start()
        elif choice == "2":
            show_tag_system()
        elif choice == "3":
            show_dashboards()
        elif choice == "4":
            show_scripts()
        elif choice == "5":
            show_documentation()
        elif choice == "6":
            show_troubleshooting()
        elif choice == "7":
            show_project_status()
        elif choice == "0":
            print("\nüëã ¬°Gracias por usar el sistema de ayuda!")
            break
        else:
            print("\n‚ùå Opci√≥n no v√°lida. Intenta de nuevo.")

        input("\n‚è∏Ô∏è  Presiona Enter para continuar...")


if __name__ == "__main__":
    main()
