{
  "$schema": "https://raw.githubusercontent.com/nanlabs/awesome-nan/main/examples.schema.json",
  "list": [
    {
      "name": "Golang REST API boilerplate",
      "description": "REST API to create, update and retrieve Entities, including graceful shutdown, rate limiting, structured logging, unit tests, integration tests, environment variables, health check and API documentation with swagger. Technologies: Golang 1.19, MongoDB (with Docker Compose), Gorilla Mux, Go Swagger, Tollbooth (rate limiting), Zap (logging), Viper, Mockery, Makefile, Pre-commit, and DockerTest (integration tests).",
      "url": "https://github.com/nanlabs/nancy.go/tree/main/examples/golang-todo-rest-crud/",
      "tags": ["Apps and Boilerplates"],
      "labels": [
        "Golang",
        "REST API",
        "MongoDB",
        "Gorilla Mux",
        "Go Swagger",
        "Tollbooth",
        "Zap",
        "Viper",
        "Mockery",
        "Makefile",
        "Pre-commit",
        "Docker",
        "Docker Compose",
        "DockerTest"
      ]
    },
    {
      "name": "Python CLI Basic Example",
      "url": "https://github.com/nanlabs/backend-reference/tree/main/examples/cli-base",
      "description": "Basic structure to create a command without passing the python command and the python file's path.",
      "tags": ["Examples > Backend > CLI Tools"],
      "labels": ["Python3", "PyCMD"]
    },
    {
      "name": "Python CLI with Typer + Rich Example",
      "url": "https://github.com/nanlabs/backend-reference/tree/main/examples/cli-typer-base",
      "description": "Interaction with an external API, to retrieve some currencies exchange rates, make conversion returning styled console output.",
      "tags": ["Examples > Backend > CLI Tools"],
      "labels": ["Python3", "Requests", "Rich", "Typer"]
    },
    {
      "name": "FastAPI Basic Example",
      "url": "https://github.com/nanlabs/backend-reference/tree/main/examples/fastapi-base",
      "description": "Rest API that retrieves mock data using Faker library.",
      "tags": ["Examples > Backend > FastAPI"],
      "labels": ["Python3", "Faker", "Factory-Boy", "FastAPI", "Pydantic"]
    },
    {
      "name": "FastAPI Complete CRUD Example",
      "url": "https://github.com/nanlabs/backend-reference/tree/main/examples/fastapi-crud",
      "description": "Rest API that allows to create, read, update and delete employees and companies in the db, besides that, has endpoints to populate the db with Mock Data using faker.",
      "tags": ["Examples > Backend > FastAPI"],
      "labels": [
        "Python3",
        "Faker",
        "FastAPI",
        "Pydantic",
        "SQLAlchemy",
        "Alembic",
        "Docker",
        "Docker Compose",
        "PGAdmin",
        "PostgreSQL"
      ]
    },
    {
      "name": "FastAPI GraphQL",
      "url": "https://github.com/nanlabs/backend-reference/tree/main/examples/fastapi-gql",
      "description": "GraphQL API that retrieves fake companies using Faker library.",
      "tags": ["Examples > Backend > FastAPI"],
      "labels": [
        "Python3",
        "Factory-boy",
        "Faker",
        "FastAPI",
        "Pydantic",
        "Strawberry-graphql"
      ]
    },
    {
      "name": "Stripe Integration with Node.js and TypeScript",
      "description": "This project offers a seamless Stripe integration with Node.js and TypeScript, providing a powerful API for managing basic operations like customer creation, checkout sessions, and portal sessions. It empowers developers to effortlessly handle payment-related tasks with the Stripe API.",
      "url": "https://github.com/nanlabs/backend-reference/tree/main/examples/stripe-integration-node-typescript/",
      "tags": ["Examples > Backend > ThirdParty Integrations > Stripe"],
      "labels": [
        "Node.js",
        "TypeScript",
        "Stripe",
        "Payment Gateway",
        "API",
        "Integration",
        "Webhooks"
      ]
    },
    {
      "name": "NestJS REST-based Microservices with NATS",
      "description": "This project demonstrates the implementation of a microservices architecture using NestJS, a progressive Node.js framework, along with NATS for asynchronous event-based as well as synchronous request-reply messaging patterns.",
      "url": "https://github.com/nanlabs/backend-reference/tree/main/examples/nest-nats-microservices/",
      "tags": ["Examples > Backend > Microservices"],
      "labels": [
        "Microservices",
        "Node.js",
        "NestJS",
        "NATS",
        "REST",
        "Messaging Patterns",
        "Proof of Concept"
      ]
    },
    {
      "name": "FastAPI Example with PostgreSQL and Serverless Framework",
      "description": "This project demonstrates the implementation of a REST API using FastAPI, a modern, high-performance, web framework for building APIs with Python 3.6+ based on standard Python type hints. It also uses PostgreSQL as the database and the Serverless Framework to deploy the API to AWS Lambda.",
      "url": "https://github.com/nanlabs/backend-reference/tree/main/examples/fastapi-postgres-with-serverless",
      "tags": [
        "Apps and Boilerplates",
        "Examples > Backend > FastAPI",
        "Examples > DevOps > Infrastructure as Code > Serverless Framework, SAM and CloudFormation"
      ],
      "labels": [
        "Python3",
        "Faker",
        "FastAPI",
        "Pydantic",
        "SQLAlchemy",
        "Alembic",
        "Docker",
        "Docker Compose",
        "PGAdmin",
        "PostgreSQL",
        "Serverless Framework",
        "AWS Lambda",
        "AWS RDS",
        "AWS API Gateway"
      ]
    },
    {
      "name": "FastAPI with MongoDB and Docker Compose",
      "description": "This project demonstrates the implementation of a REST API using FastAPI, a modern, high-performance, web framework for building APIs with Python 3.6+ based on standard Python type hints. It also uses MongoDB as the database and Docker Compose to run the API and the database in containers.",
      "url": "https://github.com/nanlabs/backend-reference/tree/main/examples/fastapi-mongo-with-docker-compose",
      "tags": [
        "Apps and Boilerplates",
        "Examples > Backend > FastAPI",
        "Examples > DevOps > Containers, Orchestration and Serverless > Containers and Compositions (Docker, Docker Compose, Buildpacks and more)"
      ],
      "labels": [
        "Python3",
        "FastAPI",
        "Pydantic",
        "MongoDB",
        "Mongo Express",
        "Docker",
        "Docker Compose"
      ]
    },
    {
      "name": "SQLC with Go, PostgreSQL, Docker Compose",
      "description": "This project demonstrates the implementation of a REST API using Go, SQLC, and PostgreSQL. It uses Docker Compose to set up the development environment and includes examples of creating, reading, updating, and deleting records in the database.",
      "url": "https://github.com/nanlabs/backend-reference/tree/main/examples/golang-api-with-postgres-and-sqlc",
      "tags": [
        "Apps and Boilerplates",
        "Examples > Backend > SQLC",
        "Examples > DevOps > Containers, Orchestration and Serverless > Containers and Compositions (Docker, Docker Compose, Buildpacks and more)"
      ],
      "labels": [
        "Golang",
        "SQLC",
        "PostgreSQL",
        "Docker",
        "Docker Compose"
      ]
    }
  ]
}
